name: Cylon Raider Development

on:
  workflow_dispatch:
    inputs:
      feature_description:
        description: 'Describe the feature to build'
        required: true
        type: string
      priority:
        description: 'Feature priority'
        required: false
        default: 'medium'
        type: choice
        options:
          - 'low'
          - 'medium'
          - 'high'
          - 'critical'
      commander_approval:
        description: 'Commander approval (human decision)'
        required: true
        type: choice
        options:
          - 'approved'
          - 'needs-analysis'
        default: 'needs-analysis'

jobs:
  commander-gate:
    runs-on: self-hosted
    outputs:
      approved: ${{ github.event.inputs.commander_approval == 'approved' }}
      branch_name: ${{ steps.branch.outputs.branch_name }}
    steps:
      - name: Commander Decision Gate
        run: |
          echo "üéØ Commander Decision Gate"
          echo "========================="
          echo "Feature: ${{ github.event.inputs.feature_description }}"
          echo "Priority: ${{ github.event.inputs.priority }}"
          echo "Commander Decision: ${{ github.event.inputs.commander_approval }}"
          
          if [ "${{ github.event.inputs.commander_approval }}" = "approved" ]; then
            echo "‚úÖ Commander has approved this feature for development"
          else
            echo "‚è∏Ô∏è Feature needs Commander analysis before development"
            exit 1
          fi

      - name: Generate Branch Name
        id: branch
        run: |
          branch_name=$(echo "feature/${{ github.event.inputs.feature_description }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | cut -c1-50)
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT

  pilot-architecture:
    needs: commander-gate
    if: needs.commander-gate.outputs.approved == 'true'
    runs-on: self-hosted
    outputs:
      architecture: ${{ steps.pilot.outputs.architecture }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create feature branch
        run: |
          git checkout -b ${{ needs.commander-gate.outputs.branch_name }}
          git push -u origin ${{ needs.commander-gate.outputs.branch_name }}

      - name: Pilot Architecture Design
        id: pilot
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "üß≠ Pilot designing architecture with Claude..."
          
          # Use Claude Code for intelligent architecture design
          claude "
          You are the Pilot in a Cylon Raider Configuration development team.
          
          Feature to architect: ${{ github.event.inputs.feature_description }}
          Priority: ${{ github.event.inputs.priority }}
          
          Please:
          1. Analyze the existing project structure
          2. Design a technical architecture for this feature
          3. Create comprehensive documentation in docs/architecture/
          4. Consider: components, implementation plan, technologies, testing strategy
          5. Update any existing architectural documents as needed
          
          Work directly with the filesystem to create proper documentation.
          "
          
          # Capture architecture summary for next step
          if [ -f "docs/architecture/pilot-design.md" ]; then
            architecture_summary=$(head -20 docs/architecture/pilot-design.md)
            echo "architecture=$architecture_summary" >> $GITHUB_OUTPUT
          fi
          
          git add docs/
          git commit -m "docs: Add Pilot architecture design" || echo "No changes to commit"

  gunner-implementation:
    needs: [commander-gate, pilot-architecture]
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Switch to feature branch
        run: |
          git checkout ${{ needs.commander-gate.outputs.branch_name }}
          git pull origin ${{ needs.commander-gate.outputs.branch_name }}

      - name: Create experiment branch
        run: |
          experiment_branch="experiment/$(echo '${{ github.event.inputs.feature_description }}' | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]' | cut -c1-40)"
          git checkout -b "$experiment_branch"
          echo "EXPERIMENT_BRANCH=$experiment_branch" >> $GITHUB_ENV

      - name: Gunner Implementation
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "‚öîÔ∏è Gunner implementing feature with Claude..."
          
          # Use Claude Code for intelligent implementation
          claude "
          You are the Gunner in a Cylon Raider Configuration development team.
          
          Feature to implement: ${{ github.event.inputs.feature_description }}
          Priority: ${{ github.event.inputs.priority }}
          
          Architecture context (read from docs/architecture/ for full details):
          ${{ needs.pilot-architecture.outputs.architecture }}
          
          Please:
          1. Read the architectural documentation created by the Pilot
          2. Analyze the existing codebase structure
          3. Implement the feature with clean, professional code
          4. Create comprehensive tests
          5. Update documentation as needed
          6. Follow best practices for the detected language/framework
          
          Work directly with the filesystem to implement this feature properly.
          "
          
          # Commit changes
          git add .
          git commit -m "feat: Implement ${{ github.event.inputs.feature_description }}" || echo "No changes to commit"
          git push origin "$EXPERIMENT_BRANCH"

      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Create simple PR
          gh pr create --base ${{ needs.commander-gate.outputs.branch_name }} --head $EXPERIMENT_BRANCH --title "Experiment: ${{ github.event.inputs.feature_description }}" --body "Implementation ready for review"

  commander-summary:
    needs: [commander-gate, pilot-architecture, gunner-implementation]
    if: always() && needs.commander-gate.outputs.approved == 'true'
    runs-on: self-hosted
    steps:
      - name: Summary
        run: |
          echo "üéØ Cylon mission complete for: ${{ github.event.inputs.feature_description }}"
          echo "Review the pull request and approve when ready."
